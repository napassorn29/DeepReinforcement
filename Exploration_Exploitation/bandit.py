import numpy as np
from numpy import random
import matplotlib.pyplot as plt
import random

class MultiArmBandit():
    def __init__(self, num_bandits:int, rewards=None, prob_reward=None):
        self.num_bandits = num_bandits
        
        if rewards is None:
            rewards = []
        if prob_reward is None:
            prob_reward = []
            
        if not rewards and not prob_reward:
            for i in range(num_bandits):
                num_reward = np.random.randint(2,5)
                rewards.append(random.choices(range(-10, 11), k=num_reward))
                num_prob = random.sample(range(0, 10), num_reward)
                sum_num_prob = sum(num_prob)
                prob = []
                for j in range(len(num_prob)):
                    if j == len(num_prob)-1:
                        prob.append(round(1-sum(prob),2))
                    else:
                        prob.append(round(num_prob[j]/sum_num_prob,2))
                prob_reward.append(prob)

        if len(rewards) == num_bandits and len(prob_reward) == num_bandits:
            check_num_bandits = True
            for i in range(num_bandits):
                if round(sum(prob_reward[i]), 2) != 1.00:
                    raise ValueError('Sum of prob_reward must be 1')
                if len(rewards[i]) != len(prob_reward[i]):
                    check_num_bandits = False
                    raise ValueError('Number of rewards and prob_reward must match number of arms per bandit')
            if check_num_bandits:
                self.reward = rewards
                self.prob_reward = prob_reward
                
        if len(rewards) != num_bandits or len(prob_reward) != num_bandits:
            raise ValueError('Number of rewards and prob_reward must match number of bandits')


        # # Initialize true rewards for each arm in each bandit
        # self.true_rewards = np.random.normal(0, 1, (num_bandits, num_arms_per_bandit))

        # # Initialize estimated rewards for each arm in each bandit
        # self.estimated_rewards = np.zeros((num_bandits, num_arms_per_bandit))

        # # Initialize number of pulls for each arm in each bandit
        # self.arm_pulls = np.zeros((num_bandits, num_arms_per_bandit))

    def pull_arm(self, bandit_index, arm_index):
        # Simulate pulling an arm and receiving a reward
        reward = np.random.normal(self.true_rewards[bandit_index, arm_index], 1)
        return reward
    
    
# bandit = MultiArmBandit(3, [[-2, 0, 2, 4], [2, 3, 0, 4], [5, -5, 0]], [[0.4, 0.2, 0.3, 0.1], [0.2, 0.1, 0.5, 0.2], [0.2, 0.5, 0.3]])
bandit = MultiArmBandit(4)
print(bandit.reward)
print(bandit.prob_reward)
# print(bandit.num_prob)